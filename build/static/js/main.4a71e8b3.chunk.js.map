{"version":3,"sources":["components/ChartHolder.js","components/Bar.js","components/Bubble.js","components/Doughnut.js","components/Line.js","components/Home.js","components/NavagationBar.js","App.js","serviceWorker.js","index.js"],"names":["ChartHolder","props","charType","refType","chartType","Row","className","Col","md","id","ref","Bar","myBarRef","useRef","useEffect","barRef","current","getContext","Chart","type","data","labels","datasets","label","backgroundColor","options","responsive","title","display","text","fontFamily","legend","tooltips","scales","error","Container","Bubble","myBubbleRef","bubbleRef","x","y","r","console","log","Doughnut","myDoughnutRef","doughnutRef","Line","mylineRef","lineref","Home","NavagationBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Item","Link","App","Fragment","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a71e8b3.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col} from 'react-bootstrap'\n\nconst ChartHolder = (props) => {\n    const {chartType, refType} = {\n        charType: props.charType,\n        refType: props.refType\n    }\n    return (\n        <>\n            <Row className=\"justify-content-md-center\">\n                <Col md={10}>\n                    <canvas id={chartType} ref={refType}></canvas>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default ChartHolder;\n","import React from 'react';\nimport { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport { Container } from 'react-bootstrap';\nimport ChartHolder from './ChartHolder';\n\n\nconst Bar = () => {\n    const myBarRef = useRef(null);\n\n    useEffect(() => {\n        const barRef = myBarRef.current.getContext(\"2d\")\n\n       try {\n           new Chart(barRef, {\n               type: 'bar',\n               data: {\n                   labels: ['Jan', 'Feb', 'March', 'April', 'June', 'July', 'Aug', 'Sept'],\n                   datasets: [\n                       {\n                           label: \"First Data\",\n                           data: [3, 7, 12, 17, 21, 28, 32, 41],\n                           backgroundColor: 'rgba(24,233, 75, 0.6)'\n                       },\n                       {\n                           label: \"Second Data\",\n                           data: [5, 11, 15, 22, 30, 36, 40, 45],\n                           backgroundColor: 'rgba(28,163, 175, 0.6)'\n                       }\n                   ]\n               },\n               options: {\n                   responsive: true,\n                   title: {\n                       display: true,\n                       text: \"This is the Line Title\",\n                       fontFamily: \"Cambria\"\n                   },\n                   legend: {},\n                   tooltips: {},\n                   scales: {}\n\n               }\n           });\n       } catch (error) {\n           \n       }\n    });\n    return (\n        <div>\n            <Container>\n                <h1>Bar</h1>\n                <ChartHolder chartType=\"barchart\" refType={myBarRef} />\n            </Container>\n        </div>\n    );\n}\n\nexport default Bar;\n","import React from 'react';\nimport { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport Container from 'react-bootstrap/Container';\nimport ChartHolder from './ChartHolder';\n\nconst Bubble = () => {\n    const myBubbleRef = useRef(null);\n\n    useEffect(() => {\n        const bubbleRef = myBubbleRef.current.getContext(\"2d\")\n          \n    \n        try {\n             new Chart(bubbleRef, {\n                type: 'bubble',\n                data: {\n                    labels: ['Jan', 'Feb', 'March', 'April', 'June', 'July', 'Aug', 'Sept'],\n                    datasets: [\n                        {\n                            label: \"First Data\",\n                            data: [{\n                                x: 4,\n                                y: 7,\n                                r: 15\n                            }],\n                            backgroundColor: 'rgba(24,233, 75, 0.6)'\n                        },\n                        {\n                            label: \"Second Data\",\n                            data: [{\n                                x: 9,\n                                y: 3,\n                                r: 12\n                            }],\n                            backgroundColor: 'rgba(24,33, 175, 0.6)'\n                        }\n                    ]\n                },\n                options: {\n                    responsive: true,\n                    title: {\n                        display: true,\n                        text: \"This is the Line Title\",\n                        fontFamily: \"Cambria\"\n                    },\n                    legend: {},\n                    tooltips: {},\n                    scales: {}\n\n                }\n            });  \n        } catch (error) {\n            console.log(error)\n        }\n        \n    });\n    return (\n        <div>\n            <Container>\n                <h1>Bubble</h1>\n                <ChartHolder chartType=\"bubblechart\" refType={myBubbleRef} />\n            </Container>\n        </div>\n    );\n}\n\nexport default Bubble;\n","import React from 'react';\nimport { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport Container from 'react-bootstrap/Container';\nimport ChartHolder from './ChartHolder';\n\nconst Doughnut = () => {\n    const myDoughnutRef = useRef(null);\n\n    useEffect(() => {\n        const doughnutRef = myDoughnutRef.current.getContext(\"2d\")\n\n        try {\n            new Chart(doughnutRef, {\n                type: 'doughnut',\n                data: {\n                    labels: ['Jan', 'Feb', 'March', 'April', 'June', 'July', 'Aug', 'Sept'],\n                    datasets: [\n                        {\n                            label: \"First Data\",\n                            data: [3, 7, 12, 17, 21, 28, 32, 41],\n                            backgroundColor: 'rgba(24,23, 275, 0.6)'\n                        },\n                        {\n                            label: \"Second Data\",\n                            data: [5, 11, 15, 22, 30, 36, 40, 45],\n                            backgroundColor: 'rgba(24, 70, 175, 0.6)'\n                        }\n                    ]\n                },\n                options: {\n                    responsive: true,\n                    title: {\n                        display: true,\n                        text: \"This is the Line Title\",\n                        fontFamily: \"Cambria\"\n                    },\n                    legend: {},\n                    tooltips: {},\n                    scales: {}\n\n                }\n            });\n        } catch (error) {\n            console.log(error)\n        }\n    });\n    return (\n        <div>\n            <Container>\n                <h1>Doughnut</h1>\n                <ChartHolder chartType=\"doughnut\" refType={myDoughnutRef} />\n            </Container>\n        </div>\n    );\n}\n\nexport default Doughnut;\n","import React from 'react';\nimport { useRef, useEffect} from 'react';\nimport { Container} from 'react-bootstrap';\nimport Chart from 'chart.js';\nimport ChartHolder from './ChartHolder';\n\nconst Line = () => {\n    const mylineRef = useRef(null);\n\n    useEffect(() => {\n        const lineref = mylineRef.current.getContext(\"2d\")\n\n        try {\n            new Chart(lineref, {\n                type: 'line',\n                data: {\n                    labels: ['Jan', 'Feb', 'March', 'April', 'June', 'July', 'Aug', 'Sept'],\n                    datasets: [\n                        {\n                            label: \"First Data\",\n                            data: [3, 7, 12, 17, 21, 28, 32, 41],\n                            backgroundColor: 'rgba(24,23, 75, 0.6)'\n                        },\n                        {\n                            label: \"Second Data\",\n                            data: [5, 11, 15, 22, 30, 36, 40, 45],\n                            backgroundColor: 'rgba(20,233, 75, 0.6)'\n                        }\n                    ]\n                },\n                options: {\n                    responsive: true,\n                    title: {\n                        display: true,\n                        text: \"This is the Line Title\",\n                        fontFamily: \"Cambria\"\n                    },\n                    legend: {},\n                    tooltips: {},\n                    scales: {}\n\n                }\n            });\n        } catch (error) {\n            console.log(error)\n        }\n    });\n\n    return (\n        <div>\n            <Container>\n                <h1>Line</h1>\n                <ChartHolder chartType=\"linechart\" refType={mylineRef} />\n            </Container>\n        </div>\n    );\n}\n\nexport default Line;\n","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\n\nconst Home = () => {\n    return (\n        <div>\n            <Container>\n                <h1>Homepage</h1>\n                <p> Examples of graphs using Graph.js </p>\n            </Container>\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nconst NavagationBar = () => {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href='/'>React with Chart.js</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"my-navbar-collapse\">\n                <Nav className=\"ml-auto\">\n                    <Nav.Item><Nav.Link href='/'>Home</Nav.Link> </Nav.Item>\n                    <Nav.Item><Nav.Link href='/line'>Line</Nav.Link> </Nav.Item>\n                    <Nav.Item><Nav.Link href='/bar'>Bar</Nav.Link> </Nav.Item>\n                    <Nav.Item><Nav.Link href='/doughnut'>Doughnut</Nav.Link> </Nav.Item>\n                    <Nav.Item><Nav.Link href='/bubble'>Bubble</Nav.Link> </Nav.Item>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default NavagationBar;\n","import React from 'react';\nimport './App.css';\nimport Bar from './components/Bar';\nimport Bubble from './components/Bubble';\nimport Doughnut from './components/Doughnut';\nimport Line from './components/Line';\nimport Home from './components/Home';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport NavagationBar from './components/NavagationBar';\n\nfunction App() {\n  return (\n    <React.Fragment>\n    <NavagationBar />\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/line\" component={Line} />\n          <Route path=\"/bar\" render={(props) => {\n            return (<Bar />)\n          }\n          } />\n          <Route path=\"/bubble\" component={Bubble} />\n          <Route path=\"/doughnut\" component={Doughnut} />\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}